From 18cf1caf26f5bfd29f70006a361149fd4a1e1ccb Mon Sep 17 00:00:00 2001
From: Emanuele Santini <emanuele.santini.88@gmail.com>
Date: Mon, 3 Feb 2025 13:04:47 +0100
Subject: [PATCH] This patch first includes all three patches from openhybrid:
 https://github.com/action-server/openhybrid/tree/master/patch/busybox/1_36_1

Additionally, it introduces a small fix to allow the BusyBox DHCP applet to
function on a GRE tunnel with IPv6. The fix is applied to the following two
functions:
- d6_send_raw_packet_from_client_data_ifindex
- udhcp_send_raw_packet

Starting from kernel version 4.20, packet sockets of type SOCK_DGRAM
introduced a security check that causes the sendto system call to fail
when it is executed on a IP6GRE interface. This strange kernel issue is
handled here:
https://bugzilla.kernel.org/show_bug.cgi?id=202147
https://bugzilla.kernel.org/show_bug.cgi?id=219603

To circumvent this issue, the patch changes the socket type to SOCK_RAW.
Since GRE tunnels are implemented at the network stack level, no hardware
header is added to packets sent through the tunnel.

Important: After applying this patch, the BusyBox DHCP applet will work
only on GRE network interfaces.
---
 networking/udhcp/d6_dhcpc.c  | 10 +++++++---
 networking/udhcp/d6_packet.c |  2 +-
 networking/udhcp/d6_socket.c | 11 +++++++----
 networking/udhcp/packet.c    |  2 +-
 networking/udhcp/socket.c    | 11 ++++++++++-
 5 files changed, 26 insertions(+), 10 deletions(-)

diff --git a/networking/udhcp/d6_dhcpc.c b/networking/udhcp/d6_dhcpc.c
index cdd06188e..0a08be523 100644
--- a/networking/udhcp/d6_dhcpc.c
+++ b/networking/udhcp/d6_dhcpc.c
@@ -334,7 +334,7 @@ static void option_to_env(const uint8_t *option, const uint8_t *option_end)
  */
 			move_from_unaligned32(v32, option + 4 + 4);
 			v32 = ntohl(v32);
-			*new_env() = xasprintf("ipv6prefix_lease=%u", (unsigned)v32);
+			*new_env() = xasprintf("ipv6prefix_lease=%u", (unsigned)ntohl(v32));
 
 			sprint_nip6(ipv6str, option + 4 + 4 + 4 + 1);
 			*new_env() = xasprintf("ipv6prefix=%s/%u", ipv6str, (unsigned)(option[4 + 4 + 4]));
@@ -703,7 +703,7 @@ static NOINLINE int send_d6_discover(struct in6_addr *requested_ipv6)
 		client6_data.ia_na = xzalloc(len);
 		client6_data.ia_na->code = D6_OPT_IA_NA;
 		client6_data.ia_na->len = len - 4;
-		*(bb__aliased_uint32_t*)client6_data.ia_na->data = rand(); /* IAID */
+		*(bb__aliased_uint32_t*)client6_data.ia_na->data = 1000000000; /* IAID */
 		if (requested_ipv6) {
 			struct d6_option *iaaddr = (void*)(client6_data.ia_na->data + 4+4+4);
 			iaaddr->code = D6_OPT_IAADDR;
@@ -721,7 +721,7 @@ static NOINLINE int send_d6_discover(struct in6_addr *requested_ipv6)
 		client6_data.ia_pd = xzalloc(len);
 		client6_data.ia_pd->code = D6_OPT_IA_PD;
 		client6_data.ia_pd->len = len - 4;
-		*(bb__aliased_uint32_t*)client6_data.ia_pd->data = rand(); /* IAID */
+		*(bb__aliased_uint32_t*)client6_data.ia_pd->data = 1000000000; /* IAID */
 		opt_ptr = mempcpy(opt_ptr, client6_data.ia_pd, len);
 	}
 
@@ -1428,6 +1428,10 @@ int udhcpc6_main(int argc UNUSED_PARAM, char **argv)
 				continue;
 			case REQUESTING:
 				if (!discover_retries || packet_num < discover_retries) {
+					if (option_mask32 & OPT_d) {
+						free(client6_data.ia_pd);
+						client6_data.ia_pd = d6_copy_option(packet.d6_options, packet_end, D6_OPT_IA_PD);
+					}
 					/* send multicast select packet */
 					send_d6_select();
 					timeout = discover_timeout;
diff --git a/networking/udhcp/d6_packet.c b/networking/udhcp/d6_packet.c
index 142de9b43..7fe9591cd 100644
--- a/networking/udhcp/d6_packet.c
+++ b/networking/udhcp/d6_packet.c
@@ -62,7 +62,7 @@ int FAST_FUNC d6_send_raw_packet_from_client_data_ifindex(
 	int result = -1;
 	const char *msg;
 
-	fd = socket(PF_PACKET, SOCK_DGRAM, htons(ETH_P_IPV6));
+	fd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_IPV6));
 	if (fd < 0) {
 		msg = "socket(%s)";
 		goto ret_msg;
diff --git a/networking/udhcp/d6_socket.c b/networking/udhcp/d6_socket.c
index acf108367..0110e6065 100644
--- a/networking/udhcp/d6_socket.c
+++ b/networking/udhcp/d6_socket.c
@@ -74,7 +74,7 @@ int FAST_FUNC d6_read_interface(
 	freeifaddrs(ifap);
 
 	if (retval & (1<<0)) {
-		/* This iface has no MAC (e.g. ppp), generate a random one */
+		/* This iface has no MAC (e.g. ppp), set a static one */
 		struct ifreq ifr;
 		int fd;
 
@@ -86,9 +86,12 @@ int FAST_FUNC d6_read_interface(
 			log2("ifindex %d", *ifindex);
 			if (((uint32_t*)mac)[0] == 0) {
 				/* invent a fictitious MAC (once) */
-				((uint32_t*)mac)[0] = rand();
-				((uint16_t*)mac)[2] = rand();
-				mac[0] &= 0xfc; /* make sure it's not bcast */
+				mac[0] = 0x10;
+				mac[1] = 0x00;
+				mac[2] = 0x00;
+				mac[3] = 0x00;
+				mac[4] = 0x00;
+				mac[5] = 0x00;
 			}
 			retval &= (3 - (1<<0));
 		}
diff --git a/networking/udhcp/packet.c b/networking/udhcp/packet.c
index 529978189..a3ae9966c 100644
--- a/networking/udhcp/packet.c
+++ b/networking/udhcp/packet.c
@@ -115,7 +115,7 @@ int FAST_FUNC udhcp_send_raw_packet(struct dhcp_packet *dhcp_pkt,
 	int result = -1;
 	const char *msg;
 
-	fd = socket(PF_PACKET, SOCK_DGRAM, htons(ETH_P_IP));
+	fd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_IP));
 	if (fd < 0) {
 		msg = "socket(%s)";
 		goto ret_msg;
diff --git a/networking/udhcp/socket.c b/networking/udhcp/socket.c
index 35e10688b..71a315521 100644
--- a/networking/udhcp/socket.c
+++ b/networking/udhcp/socket.c
@@ -65,7 +65,16 @@ int FAST_FUNC udhcp_read_interface(const char *interface, int *ifindex, uint32_t
 			close(fd);
 			return -1;
 		}
-		memcpy(mac, ifr->ifr_hwaddr.sa_data, 6);
+		if (memcmp(ifr->ifr_hwaddr.sa_data, "\0\0\0\0\0\0", 6) == 0) {
+			mac[0] = 0x10;
+			mac[1] = 0x00;
+			mac[2] = 0x00;
+			mac[3] = 0x00;
+			mac[4] = 0x00;
+			mac[5] = 0x00;
+		} else {
+			memcpy(mac, ifr->ifr_hwaddr.sa_data, 6);
+		}
 		log2("MAC %02x:%02x:%02x:%02x:%02x:%02x",
 			mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 	}
-- 
2.47.1

